# main.py
from mysql_connector import search_by_title, search_by_filters, PAGE_SIZE
from mongo_connector import get_top5_queries
from formatter import print_table
from log_writer import save_log

import logging

# –õ—ë–≥–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª errors.log)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("errors.log", encoding="utf-8")]
)

def menu():
    print("\n*** Movie Finder ***")
    print("(1) –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (keyword)")
    print("(2) –ü–æ–∫–∞–∑–∞—Ç—å TOP-5 –∑–∞–ø—Ä–æ—Å–æ–≤ (Mongo)")
    print("(3) –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É/–≥–æ–¥—É")
    print("(0) –í—ã—Ö–æ–¥")

def action_search_by_keyword():
    try:
        keyword = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: ").strip()
        if not keyword:
            print("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.")
            return

        offset, total = 0, 0
        while True:
            rows = search_by_title(keyword, offset)
            if not rows:
                if offset == 0:
                    print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                break

            print_table(rows)
            total += len(rows)
            offset += PAGE_SIZE

            if input("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë (y/n)? ").strip().lower() != "y":
                break

        # –ª–æ–≥ –≤ Mongo: –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        save_log("keyword", {"keyword": keyword}, total)

    except Exception as e:
        print(f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
        # –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ Mongo + —Å—Ç–µ–∫ –≤ —Ñ–∞–π–ª
        save_log("error", {"where": "action_search_by_keyword", "error": str(e)}, 0)
        logging.exception("–û—à–∏–±–∫–∞ –≤ action_search_by_keyword")

def action_search_by_filters():
    try:
        print("\n=== –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É/–≥–æ–¥—É ===")
        keyword = (input("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (ENTER ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip() or None)

        genres_raw = input("–ñ–∞–Ω—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä Action,Comedy) (ENTER ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
        genres = [g.strip() for g in genres_raw.split(",") if g.strip()] if genres_raw else None

        year_from = input("–ì–æ–¥ —Å (ENTER ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
        year_to   = input("–ì–æ–¥ –ø–æ (ENTER ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
        year_from = int(year_from) if year_from else None
        year_to   = int(year_to)   if year_to   else None

        offset, total = 0, 0
        while True:
            rows = search_by_filters(
                keyword=keyword,
                genres=genres,
                year_from=year_from,
                year_to=year_to,
                offset=offset
            )
            if not rows:
                if offset == 0:
                    print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                break

            print_table(rows)
            total += len(rows)
            offset += PAGE_SIZE

            if input("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë (y/n)? ").strip().lower() != "y":
                break

        # –ª–æ–≥ –≤ Mongo
        save_log("filters",
                 {"keyword": keyword, "genres": genres, "year_from": year_from, "year_to": year_to},
                 total)

    except Exception as e:
        print(f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
        save_log("error", {"where": "action_search_by_filters", "error": str(e)}, 0)
        logging.exception("–û—à–∏–±–∫–∞ –≤ action_search_by_filters")

def action_show_top5():
    try:
        top = get_top5_queries()
        if not top:
            print("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return

        print("\n*** TOP-5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ MongoDB ***")
        for i, item in enumerate(top, start=1):
            print(f"{i}. {item['_id']} ‚Äî {item['count']} —Ä–∞–∑")

        # –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Ñ–∞–∫—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        save_log("show_top5", {}, len(top))

    except Exception as e:
        print(f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
        save_log("error", {"where": "action_show_top5", "error": str(e)}, 0)
        logging.exception("–û—à–∏–±–∫–∞ –≤ action_show_top5")

def main():
    while True:
        menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ").strip()
        if choice == "1":
            action_search_by_keyword()
        elif choice == "2":
            action_show_top5()
        elif choice == "3":
            action_search_by_filters()
        elif choice == "0":
            print("–ü–æ–∫–∞! üëã")
            break
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 0.")

if __name__ == "__main__":
    main()